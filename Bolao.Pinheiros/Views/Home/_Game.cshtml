@using Bolao.Pinheiros.Models
@model Game
@{
    const string BASE_URL_LOGO = "https://imagecache.365scores.com/image/upload/f_auto,w_96,h_96,c_limit,q_auto:eco,d_Competitors:default1.png/Competitors/";
}
@if (Model != null)
{
    var logoUrlHome = BASE_URL_LOGO + Model.homeCompetitor.id;
    var logoUrlAway = BASE_URL_LOGO + Model.awayCompetitor.id;
    var homeStanding = ViewData["HomeStanding"] as Row;
    var awayStanding = ViewData["AwayStanding"] as Row;
    <div class="component">
        <div class="link game-card">
            <div class="component status-text @(Model.IsGamePlaying() ? "game-playing" : string.Empty) @(Model.IsGameLive() ? "game-live" : string.Empty)">
                <div class="game-card-status-badge">
                    @(Model.IsGameLive() ? Model.gameTimeDisplay.Replace("'", string.Empty) : Model.statusText)
                </div>
            </div>
            <div class="game-card-content">
                <div class="game-card-competitor-container">
                    <div class="game-card-competitor-logo-wrap">
                        <img class="game-card-competitor-logo" src="@(string.Concat(BASE_URL_LOGO, Model.homeCompetitor.id))" />
                    </div>
                    <div class="ellipsis game-card-competitor-qualified-name text-component" style="-webkit-line-clamp: 2;">
                        @if (homeStanding != null)
                        {
                            <label class="team-position">@(homeStanding.position)º</label>
                        }
                        @(Model.homeCompetitor.name)
                    </div>
                    @if (homeStanding != null && homeStanding.detailedRecentForm != null)
                    {
                        <div class="standings-widget-table-form-cell">
                            @foreach (var recentHome in homeStanding.detailedRecentForm.OrderBy(x => x.id).Where(x => x.id != Model.id))
                            {
                                var classGame = recentHome.IsDraw() ? "draw" : recentHome.GetWinner().id == Model.homeCompetitor.id ? "win" : "lose";
                                var resultGame = recentHome.IsDraw() ? "E" : recentHome.GetWinner().id == Model.homeCompetitor.id ? "V" : "D";
                                <div class="game-badge game-badge-@(classGame)">@(resultGame)</div>
                            }
                        </div>
                    }
                </div>
                <div class="game-card-content-score">
                    @(Model.GetCurrentScoreText())
                </div>
                <div class="game-card-competitor-container game-card-competitor-container-away">
                    <div class="game-card-competitor-logo-wrap">
                        <img class="game-card-competitor-logo" src="@(string.Concat(BASE_URL_LOGO, Model.awayCompetitor.id))">
                    </div>
                    <div class="ellipsis game-card-competitor-qualified-name text-component" style="-webkit-line-clamp: 2;">
                        @(Model.awayCompetitor.name)
                        @if (awayStanding != null)
                        {
                            <label class="team-position">@(awayStanding.position)º</label>
                        }
                    </div>
                    @if (awayStanding != null && awayStanding.detailedRecentForm != null)
                    {
                        <div class="standings-widget-table-form-cell">
                            @foreach (var recentAway in awayStanding.detailedRecentForm.OrderBy(x => x.id).Where(x => x.id != Model.id))
                            {
                                var classGame = recentAway.IsDraw() ? "draw" : recentAway.GetWinner().id == Model.awayCompetitor.id ? "win" : "lose";
                                var resultGame = recentAway.IsDraw() ? "E" : recentAway.GetWinner().id == Model.awayCompetitor.id ? "V" : "D";                                
                                <div class="game-badge game-badge-@(classGame)">@(resultGame)</div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}